// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"shopular/ent/order"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Order is the model entity for the Order schema.
type Order struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// OrderDate holds the value of the "order_date" field.
	OrderDate time.Time `json:"order_date,omitempty"`
	// ShippingAddress holds the value of the "shipping_address" field.
	ShippingAddress string `json:"shipping_address,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// PaymentMethod holds the value of the "payment_method" field.
	PaymentMethod order.PaymentMethod `json:"payment_method,omitempty"`
	// TotalPrice holds the value of the "total_price" field.
	TotalPrice int32 `json:"total_price,omitempty"`
	// TrackingNumber holds the value of the "tracking_number" field.
	TrackingNumber string `json:"tracking_number,omitempty"`
	// OrderStatus holds the value of the "order_status" field.
	OrderStatus order.OrderStatus `json:"order_status,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Order) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case order.FieldID, order.FieldTotalPrice:
			values[i] = new(sql.NullInt64)
		case order.FieldShippingAddress, order.FieldPhone, order.FieldPaymentMethod, order.FieldTrackingNumber, order.FieldOrderStatus:
			values[i] = new(sql.NullString)
		case order.FieldOrderDate:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Order", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Order fields.
func (o *Order) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case order.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case order.FieldOrderDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field order_date", values[i])
			} else if value.Valid {
				o.OrderDate = value.Time
			}
		case order.FieldShippingAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_address", values[i])
			} else if value.Valid {
				o.ShippingAddress = value.String
			}
		case order.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				o.Phone = value.String
			}
		case order.FieldPaymentMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_method", values[i])
			} else if value.Valid {
				o.PaymentMethod = order.PaymentMethod(value.String)
			}
		case order.FieldTotalPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_price", values[i])
			} else if value.Valid {
				o.TotalPrice = int32(value.Int64)
			}
		case order.FieldTrackingNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tracking_number", values[i])
			} else if value.Valid {
				o.TrackingNumber = value.String
			}
		case order.FieldOrderStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_status", values[i])
			} else if value.Valid {
				o.OrderStatus = order.OrderStatus(value.String)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Order.
// Note that you need to call Order.Unwrap() before calling this method if this Order
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Order) Update() *OrderUpdateOne {
	return (&OrderClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the Order entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Order) Unwrap() *Order {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Order is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Order) String() string {
	var builder strings.Builder
	builder.WriteString("Order(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("order_date=")
	builder.WriteString(o.OrderDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("shipping_address=")
	builder.WriteString(o.ShippingAddress)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(o.Phone)
	builder.WriteString(", ")
	builder.WriteString("payment_method=")
	builder.WriteString(fmt.Sprintf("%v", o.PaymentMethod))
	builder.WriteString(", ")
	builder.WriteString("total_price=")
	builder.WriteString(fmt.Sprintf("%v", o.TotalPrice))
	builder.WriteString(", ")
	builder.WriteString("tracking_number=")
	builder.WriteString(o.TrackingNumber)
	builder.WriteString(", ")
	builder.WriteString("order_status=")
	builder.WriteString(fmt.Sprintf("%v", o.OrderStatus))
	builder.WriteByte(')')
	return builder.String()
}

// Orders is a parsable slice of Order.
type Orders []*Order

func (o Orders) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
